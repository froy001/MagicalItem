package com.froy.magicalitem.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.froy.magicalitem.dao.ItemSpells;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ITEM_SPELLS.
*/
public class ItemSpellsDao extends AbstractDao<ItemSpells, Long> {

    public static final String TABLENAME = "ITEM_SPELLS";

    /**
     * Properties of entity ItemSpells.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ItemId = new Property(1, Long.class, "itemId", false, "ITEM_ID");
        public final static Property SpellId = new Property(2, Long.class, "spellId", false, "SPELL_ID");
    };

    private DaoSession daoSession;

    private Query<ItemSpells> magicalItems_ItemSpellsListQuery;
    private Query<ItemSpells> spells_ItemSpellsListQuery;

    public ItemSpellsDao(DaoConfig config) {
        super(config);
    }
    
    public ItemSpellsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ITEM_SPELLS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ITEM_ID' INTEGER," + // 1: itemId
                "'SPELL_ID' INTEGER);"); // 2: spellId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ITEM_SPELLS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ItemSpells entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindLong(2, itemId);
        }
 
        Long spellId = entity.getSpellId();
        if (spellId != null) {
            stmt.bindLong(3, spellId);
        }
    }

    @Override
    protected void attachEntity(ItemSpells entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ItemSpells readEntity(Cursor cursor, int offset) {
        ItemSpells entity = new ItemSpells( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // itemId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // spellId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ItemSpells entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSpellId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ItemSpells entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ItemSpells entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "itemSpellsList" to-many relationship of MagicalItems. */
    public List<ItemSpells> _queryMagicalItems_ItemSpellsList(Long itemId) {
        synchronized (this) {
            if (magicalItems_ItemSpellsListQuery == null) {
                QueryBuilder<ItemSpells> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ItemId.eq(null));
                magicalItems_ItemSpellsListQuery = queryBuilder.build();
            }
        }
        Query<ItemSpells> query = magicalItems_ItemSpellsListQuery.forCurrentThread();
        query.setParameter(0, itemId);
        return query.list();
    }

    /** Internal query to resolve the "itemSpellsList" to-many relationship of Spells. */
    public List<ItemSpells> _querySpells_ItemSpellsList(Long spellId) {
        synchronized (this) {
            if (spells_ItemSpellsListQuery == null) {
                QueryBuilder<ItemSpells> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SpellId.eq(null));
                spells_ItemSpellsListQuery = queryBuilder.build();
            }
        }
        Query<ItemSpells> query = spells_ItemSpellsListQuery.forCurrentThread();
        query.setParameter(0, spellId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMagicalItemsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getSpellsDao().getAllColumns());
            builder.append(" FROM ITEM_SPELLS T");
            builder.append(" LEFT JOIN MAGICAL_ITEMS T0 ON T.'ITEM_ID'=T0.'_id'");
            builder.append(" LEFT JOIN SPELLS T1 ON T.'SPELL_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ItemSpells loadCurrentDeep(Cursor cursor, boolean lock) {
        ItemSpells entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MagicalItems item = loadCurrentOther(daoSession.getMagicalItemsDao(), cursor, offset);
        entity.setItem(item);
        offset += daoSession.getMagicalItemsDao().getAllColumns().length;

        Spells itemSpells = loadCurrentOther(daoSession.getSpellsDao(), cursor, offset);
        entity.setItemSpells(itemSpells);

        return entity;    
    }

    public ItemSpells loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ItemSpells> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ItemSpells> list = new ArrayList<ItemSpells>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ItemSpells> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ItemSpells> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
