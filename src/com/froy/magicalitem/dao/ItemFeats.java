package com.froy.magicalitem.dao;

import com.froy.magicalitem.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ITEM_FEATS.
 */
public class ItemFeats {

    private Long id;
    private Long itemId;
    private Long featId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemFeatsDao myDao;

    private MagicalItems item;
    private Long item__resolvedKey;

    private Feats itemFeats;
    private Long itemFeats__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ItemFeats() {
    }

    public ItemFeats(Long id) {
        this.id = id;
    }

    public ItemFeats(Long id, Long itemId, Long featId) {
        this.id = id;
        this.itemId = itemId;
        this.featId = featId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemFeatsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getItemId() {
        return itemId;
    }

    public void setItemId(Long itemId) {
        this.itemId = itemId;
    }

    public Long getFeatId() {
        return featId;
    }

    public void setFeatId(Long featId) {
        this.featId = featId;
    }

    /** To-one relationship, resolved on first access. */
    public MagicalItems getItem() {
        Long __key = this.itemId;
        if (item__resolvedKey == null || !item__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MagicalItemsDao targetDao = daoSession.getMagicalItemsDao();
            MagicalItems itemNew = targetDao.load(__key);
            synchronized (this) {
                item = itemNew;
            	item__resolvedKey = __key;
            }
        }
        return item;
    }

    public void setItem(MagicalItems item) {
        synchronized (this) {
            this.item = item;
            itemId = item == null ? null : item.getId();
            item__resolvedKey = itemId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Feats getItemFeats() {
        Long __key = this.featId;
        if (itemFeats__resolvedKey == null || !itemFeats__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FeatsDao targetDao = daoSession.getFeatsDao();
            Feats itemFeatsNew = targetDao.load(__key);
            synchronized (this) {
                itemFeats = itemFeatsNew;
            	itemFeats__resolvedKey = __key;
            }
        }
        return itemFeats;
    }

    public void setItemFeats(Feats itemFeats) {
        synchronized (this) {
            this.itemFeats = itemFeats;
            featId = itemFeats == null ? null : itemFeats.getId();
            itemFeats__resolvedKey = featId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
