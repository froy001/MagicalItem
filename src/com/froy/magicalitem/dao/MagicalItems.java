package com.froy.magicalitem.dao;

import java.util.List;
import com.froy.magicalitem.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MAGICAL_ITEMS.
 */
public class MagicalItems {

    private Long id;
    /** Not-null value. */
    private String name;
    private Long category_id;
    private Integer casterLevel;
    private String description;
    private Integer price;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MagicalItemsDao myDao;

    private Categories itemCategory;
    private Long itemCategory__resolvedKey;

    private List<ItemSpells> itemSpellsList;
    private List<ItemFeats> itemFeatsList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MagicalItems() {
    }

    public MagicalItems(Long id) {
        this.id = id;
    }

    public MagicalItems(Long id, String name, Long category_id, Integer casterLevel, String description, Integer price) {
        this.id = id;
        this.name = name;
        this.category_id = category_id;
        this.casterLevel = casterLevel;
        this.description = description;
        this.price = price;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMagicalItemsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Long getCategory_id() {
        return category_id;
    }

    public void setCategory_id(Long category_id) {
        this.category_id = category_id;
    }

    public Integer getCasterLevel() {
        return casterLevel;
    }

    public void setCasterLevel(Integer casterLevel) {
        this.casterLevel = casterLevel;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getPrice() {
        return price;
    }

    public void setPrice(Integer price) {
        this.price = price;
    }

    /** To-one relationship, resolved on first access. */
    public Categories getItemCategory() {
        Long __key = this.category_id;
        if (itemCategory__resolvedKey == null || !itemCategory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoriesDao targetDao = daoSession.getCategoriesDao();
            Categories itemCategoryNew = targetDao.load(__key);
            synchronized (this) {
                itemCategory = itemCategoryNew;
            	itemCategory__resolvedKey = __key;
            }
        }
        return itemCategory;
    }

    public void setItemCategory(Categories itemCategory) {
        synchronized (this) {
            this.itemCategory = itemCategory;
            category_id = itemCategory == null ? null : itemCategory.getId();
            itemCategory__resolvedKey = category_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ItemSpells> getItemSpellsList() {
        if (itemSpellsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemSpellsDao targetDao = daoSession.getItemSpellsDao();
            List<ItemSpells> itemSpellsListNew = targetDao._queryMagicalItems_ItemSpellsList(id);
            synchronized (this) {
                if(itemSpellsList == null) {
                    itemSpellsList = itemSpellsListNew;
                }
            }
        }
        return itemSpellsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetItemSpellsList() {
        itemSpellsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ItemFeats> getItemFeatsList() {
        if (itemFeatsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemFeatsDao targetDao = daoSession.getItemFeatsDao();
            List<ItemFeats> itemFeatsListNew = targetDao._queryMagicalItems_ItemFeatsList(id);
            synchronized (this) {
                if(itemFeatsList == null) {
                    itemFeatsList = itemFeatsListNew;
                }
            }
        }
        return itemFeatsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetItemFeatsList() {
        itemFeatsList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
