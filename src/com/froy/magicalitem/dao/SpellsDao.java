package com.froy.magicalitem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.froy.magicalitem.dao.Spells;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SPELLS.
*/
public class SpellsDao extends AbstractDao<Spells, Long> {

    public static final String TABLENAME = "SPELLS";

    /**
     * Properties of entity Spells.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Altname = new Property(2, String.class, "altname", false, "ALTNAME");
        public final static Property School = new Property(3, String.class, "school", false, "SCHOOL");
        public final static Property Subschool = new Property(4, String.class, "subschool", false, "SUBSCHOOL");
        public final static Property Descriptor = new Property(5, String.class, "descriptor", false, "DESCRIPTOR");
        public final static Property Spellcraft_dc = new Property(6, String.class, "spellcraft_dc", false, "SPELLCRAFT_DC");
        public final static Property Level = new Property(7, String.class, "level", false, "LEVEL");
        public final static Property Components = new Property(8, String.class, "components", false, "COMPONENTS");
        public final static Property Casting_time = new Property(9, String.class, "casting_time", false, "CASTING_TIME");
        public final static Property Range = new Property(10, String.class, "range", false, "RANGE");
        public final static Property Target = new Property(11, String.class, "target", false, "TARGET");
        public final static Property Area = new Property(12, String.class, "area", false, "AREA");
        public final static Property Effect = new Property(13, String.class, "effect", false, "EFFECT");
        public final static Property Duration = new Property(14, String.class, "duration", false, "DURATION");
        public final static Property Saving_throw = new Property(15, String.class, "saving_throw", false, "SAVING_THROW");
        public final static Property Spell_resistance = new Property(16, String.class, "spell_resistance", false, "SPELL_RESISTANCE");
        public final static Property Short_description = new Property(17, String.class, "short_description", false, "SHORT_DESCRIPTION");
        public final static Property To_develop = new Property(18, String.class, "to_develop", false, "TO_DEVELOP");
        public final static Property Material_components = new Property(19, String.class, "material_components", false, "MATERIAL_COMPONENTS");
        public final static Property Arcane_material_components = new Property(20, String.class, "arcane_material_components", false, "ARCANE_MATERIAL_COMPONENTS");
        public final static Property Focus = new Property(21, String.class, "focus", false, "FOCUS");
        public final static Property Description = new Property(22, String.class, "description", false, "DESCRIPTION");
        public final static Property Xp_cost = new Property(23, String.class, "xp_cost", false, "XP_COST");
        public final static Property Arcane_focus = new Property(24, String.class, "arcane_focus", false, "ARCANE_FOCUS");
        public final static Property Wizard_focus = new Property(25, String.class, "wizard_focus", false, "WIZARD_FOCUS");
        public final static Property Verbal_components = new Property(26, String.class, "verbal_components", false, "VERBAL_COMPONENTS");
        public final static Property Sorcerer_focus = new Property(27, String.class, "sorcerer_focus", false, "SORCERER_FOCUS");
        public final static Property Bard_focus = new Property(28, String.class, "bard_focus", false, "BARD_FOCUS");
        public final static Property Cleric_focus = new Property(29, String.class, "cleric_focus", false, "CLERIC_FOCUS");
        public final static Property Druid_focus = new Property(30, String.class, "druid_focus", false, "DRUID_FOCUS");
        public final static Property Full_text = new Property(31, String.class, "full_text", false, "FULL_TEXT");
        public final static Property Reference = new Property(32, String.class, "reference", false, "REFERENCE");
    };

    private DaoSession daoSession;


    public SpellsDao(DaoConfig config) {
        super(config);
    }
    
    public SpellsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SPELLS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT UNIQUE ," + // 1: name
                "'ALTNAME' TEXT UNIQUE ," + // 2: altname
                "'SCHOOL' TEXT," + // 3: school
                "'SUBSCHOOL' TEXT," + // 4: subschool
                "'DESCRIPTOR' TEXT," + // 5: descriptor
                "'SPELLCRAFT_DC' TEXT," + // 6: spellcraft_dc
                "'LEVEL' TEXT," + // 7: level
                "'COMPONENTS' TEXT," + // 8: components
                "'CASTING_TIME' TEXT," + // 9: casting_time
                "'RANGE' TEXT," + // 10: range
                "'TARGET' TEXT," + // 11: target
                "'AREA' TEXT," + // 12: area
                "'EFFECT' TEXT," + // 13: effect
                "'DURATION' TEXT," + // 14: duration
                "'SAVING_THROW' TEXT," + // 15: saving_throw
                "'SPELL_RESISTANCE' TEXT," + // 16: spell_resistance
                "'SHORT_DESCRIPTION' TEXT," + // 17: short_description
                "'TO_DEVELOP' TEXT," + // 18: to_develop
                "'MATERIAL_COMPONENTS' TEXT," + // 19: material_components
                "'ARCANE_MATERIAL_COMPONENTS' TEXT," + // 20: arcane_material_components
                "'FOCUS' TEXT," + // 21: focus
                "'DESCRIPTION' TEXT," + // 22: description
                "'XP_COST' TEXT," + // 23: xp_cost
                "'ARCANE_FOCUS' TEXT," + // 24: arcane_focus
                "'WIZARD_FOCUS' TEXT," + // 25: wizard_focus
                "'VERBAL_COMPONENTS' TEXT," + // 26: verbal_components
                "'SORCERER_FOCUS' TEXT," + // 27: sorcerer_focus
                "'BARD_FOCUS' TEXT," + // 28: bard_focus
                "'CLERIC_FOCUS' TEXT," + // 29: cleric_focus
                "'DRUID_FOCUS' TEXT," + // 30: druid_focus
                "'FULL_TEXT' TEXT," + // 31: full_text
                "'REFERENCE' TEXT);"); // 32: reference
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SPELLS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Spells entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String altname = entity.getAltname();
        if (altname != null) {
            stmt.bindString(3, altname);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(4, school);
        }
 
        String subschool = entity.getSubschool();
        if (subschool != null) {
            stmt.bindString(5, subschool);
        }
 
        String descriptor = entity.getDescriptor();
        if (descriptor != null) {
            stmt.bindString(6, descriptor);
        }
 
        String spellcraft_dc = entity.getSpellcraft_dc();
        if (spellcraft_dc != null) {
            stmt.bindString(7, spellcraft_dc);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(8, level);
        }
 
        String components = entity.getComponents();
        if (components != null) {
            stmt.bindString(9, components);
        }
 
        String casting_time = entity.getCasting_time();
        if (casting_time != null) {
            stmt.bindString(10, casting_time);
        }
 
        String range = entity.getRange();
        if (range != null) {
            stmt.bindString(11, range);
        }
 
        String target = entity.getTarget();
        if (target != null) {
            stmt.bindString(12, target);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(13, area);
        }
 
        String effect = entity.getEffect();
        if (effect != null) {
            stmt.bindString(14, effect);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(15, duration);
        }
 
        String saving_throw = entity.getSaving_throw();
        if (saving_throw != null) {
            stmt.bindString(16, saving_throw);
        }
 
        String spell_resistance = entity.getSpell_resistance();
        if (spell_resistance != null) {
            stmt.bindString(17, spell_resistance);
        }
 
        String short_description = entity.getShort_description();
        if (short_description != null) {
            stmt.bindString(18, short_description);
        }
 
        String to_develop = entity.getTo_develop();
        if (to_develop != null) {
            stmt.bindString(19, to_develop);
        }
 
        String material_components = entity.getMaterial_components();
        if (material_components != null) {
            stmt.bindString(20, material_components);
        }
 
        String arcane_material_components = entity.getArcane_material_components();
        if (arcane_material_components != null) {
            stmt.bindString(21, arcane_material_components);
        }
 
        String focus = entity.getFocus();
        if (focus != null) {
            stmt.bindString(22, focus);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(23, description);
        }
 
        String xp_cost = entity.getXp_cost();
        if (xp_cost != null) {
            stmt.bindString(24, xp_cost);
        }
 
        String arcane_focus = entity.getArcane_focus();
        if (arcane_focus != null) {
            stmt.bindString(25, arcane_focus);
        }
 
        String wizard_focus = entity.getWizard_focus();
        if (wizard_focus != null) {
            stmt.bindString(26, wizard_focus);
        }
 
        String verbal_components = entity.getVerbal_components();
        if (verbal_components != null) {
            stmt.bindString(27, verbal_components);
        }
 
        String sorcerer_focus = entity.getSorcerer_focus();
        if (sorcerer_focus != null) {
            stmt.bindString(28, sorcerer_focus);
        }
 
        String bard_focus = entity.getBard_focus();
        if (bard_focus != null) {
            stmt.bindString(29, bard_focus);
        }
 
        String cleric_focus = entity.getCleric_focus();
        if (cleric_focus != null) {
            stmt.bindString(30, cleric_focus);
        }
 
        String druid_focus = entity.getDruid_focus();
        if (druid_focus != null) {
            stmt.bindString(31, druid_focus);
        }
 
        String full_text = entity.getFull_text();
        if (full_text != null) {
            stmt.bindString(32, full_text);
        }
 
        String reference = entity.getReference();
        if (reference != null) {
            stmt.bindString(33, reference);
        }
    }

    @Override
    protected void attachEntity(Spells entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Spells readEntity(Cursor cursor, int offset) {
        Spells entity = new Spells( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // altname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // school
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // subschool
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // descriptor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // spellcraft_dc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // level
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // components
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // casting_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // range
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // target
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // area
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // effect
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // duration
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // saving_throw
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // spell_resistance
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // short_description
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // to_develop
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // material_components
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // arcane_material_components
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // focus
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // description
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // xp_cost
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // arcane_focus
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // wizard_focus
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // verbal_components
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // sorcerer_focus
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // bard_focus
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // cleric_focus
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // druid_focus
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // full_text
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // reference
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Spells entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAltname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSchool(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubschool(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescriptor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpellcraft_dc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setComponents(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCasting_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRange(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTarget(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setArea(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEffect(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDuration(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSaving_throw(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSpell_resistance(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setShort_description(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTo_develop(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMaterial_components(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setArcane_material_components(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFocus(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDescription(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setXp_cost(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setArcane_focus(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setWizard_focus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setVerbal_components(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSorcerer_focus(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setBard_focus(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setCleric_focus(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDruid_focus(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setFull_text(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setReference(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Spells entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Spells entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
