package com.froy.magicalitem.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.froy.magicalitem.dao.MagicalItems;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MAGICAL_ITEMS.
*/
public class MagicalItemsDao extends AbstractDao<MagicalItems, Long> {

    public static final String TABLENAME = "MAGICAL_ITEMS";

    /**
     * Properties of entity MagicalItems.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Category_id = new Property(2, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property CasterLevel = new Property(3, Integer.class, "casterLevel", false, "CASTER_LEVEL");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Price = new Property(5, Integer.class, "price", false, "PRICE");
    };

    private DaoSession daoSession;


    public MagicalItemsDao(DaoConfig config) {
        super(config);
    }
    
    public MagicalItemsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MAGICAL_ITEMS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'CATEGORY_ID' INTEGER," + // 2: category_id
                "'CASTER_LEVEL' INTEGER," + // 3: casterLevel
                "'DESCRIPTION' TEXT," + // 4: description
                "'PRICE' INTEGER);"); // 5: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MAGICAL_ITEMS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MagicalItems entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(3, category_id);
        }
 
        Integer casterLevel = entity.getCasterLevel();
        if (casterLevel != null) {
            stmt.bindLong(4, casterLevel);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(6, price);
        }
    }

    @Override
    protected void attachEntity(MagicalItems entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MagicalItems readEntity(Cursor cursor, int offset) {
        MagicalItems entity = new MagicalItems( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // category_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // casterLevel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // price
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MagicalItems entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setCategory_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCasterLevel(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MagicalItems entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MagicalItems entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoriesDao().getAllColumns());
            builder.append(" FROM MAGICAL_ITEMS T");
            builder.append(" LEFT JOIN CATEGORIES T0 ON T.'CATEGORY_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MagicalItems loadCurrentDeep(Cursor cursor, boolean lock) {
        MagicalItems entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Categories itemCategory = loadCurrentOther(daoSession.getCategoriesDao(), cursor, offset);
        entity.setItemCategory(itemCategory);

        return entity;    
    }

    public MagicalItems loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MagicalItems> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MagicalItems> list = new ArrayList<MagicalItems>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MagicalItems> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MagicalItems> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
